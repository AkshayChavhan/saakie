generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  clerkId   String    @unique
  email     String    @unique
  firstName String?
  lastName  String?
  imageUrl  String?
  phone     String?
  role      UserRole  @default(CUSTOMER)
  status    UserStatus @default(ACTIVE)
  addresses Address[]
  orders    Order[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([role])
  @@index([status])
}

model Product {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String
  price       Float
  images      String[]
  categoryId  String      @db.ObjectId
  category    Category    @relation(fields: [categoryId], references: [id])
  stock       Int         @default(0)
  featured    Boolean     @default(false)
  orderItems  OrderItem[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@index([categoryId])
  @@index([featured])
}

model Category {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  slug        String    @unique
  description String?
  products    Product[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Order {
  id               String        @id @default(auto()) @map("_id") @db.ObjectId
  userId           String        @db.ObjectId
  user             User          @relation(fields: [userId], references: [id])
  items            OrderItem[]
  totalAmount      Float
  status           OrderStatus   @default(PENDING)
  shippingAddress  Json
  paymentMethod    PaymentMethod
  paymentStatus    PaymentStatus @default(PENDING)
  paymentIntentId  String?
  trackingNumber   String?
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt

  @@index([userId])
  @@index([status])
}

model OrderItem {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  orderId   String  @db.ObjectId
  order     Order   @relation(fields: [orderId], references: [id])
  productId String  @db.ObjectId
  product   Product @relation(fields: [productId], references: [id])
  quantity  Int
  price     Float

  @@index([orderId])
  @@index([productId])
}

model Address {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  userId    String  @db.ObjectId
  user      User    @relation(fields: [userId], references: [id])
  line1     String
  line2     String?
  city      String
  state     String
  pincode   String
  country   String  @default("India")
  isDefault Boolean @default(false)

  @@index([userId])
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

enum PaymentMethod {
  CARD
  UPI
  NET_BANKING
  COD
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum UserRole {
  CUSTOMER
  MANAGER
  ADMIN
}

enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
}
